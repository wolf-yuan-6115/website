---
import "@fontsource-variable/jetbrains-mono/wght.css";

import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import Nav from "../components/Nav.astro";
import Footer from "../components/Footer.astro";
import Noscript from "../components/Noscript.astro";
import { ClientRouter } from "astro:transitions";
import { Image } from "astro:assets";
import { SEO } from "astro-seo";
import strings from "../i18n/strings";
import { ClassNameValue, twMerge } from "tailwind-merge";

dayjs.extend(utc);
dayjs.extend(timezone);

let frontmatter = Astro.props.frontmatter,
  pluginFrontmatter = Astro.props.pluginFrontmatter;

const created = dayjs(pluginFrontmatter.publishDate)
  .tz("Asia/Taipei")
  .format("YYYY/MM/DD");
const lastModified = dayjs(pluginFrontmatter.modifiedDate)
  .tz("Asia/Taipei")
  .format("YYYY/MM/DD hh:mm A");

const postImages = import.meta.glob(
  "/src/assets/blog/**/*.{jpeg,jpg,png,gif,webp}",
);

const localeCode = Astro.currentLocale === "en" ? "en_US" : "zh_Hant";
const t = strings.blog[Astro.currentLocale];

const colorArray: {
  circleColor: ClassNameValue;
  border: ClassNameValue;
}[] = [
  { circleColor: "bg-blue-300", border: "border-blue-300" },
  { circleColor: "bg-green-300", border: "border-green-300" },
  { circleColor: "bg-yellow-300", border: "border-yellow-300" },
  { circleColor: "bg-red-300", border: "border-red-300" },
  { circleColor: "bg-indigo-300", border: "border-indigo-300" },
  { circleColor: "bg-purple-300", border: "border-purple-300" },
  { circleColor: "bg-pink-300", border: "border-pink-300" },
  { circleColor: "bg-fuchsia-300", border: "border-fuchsia-300" },
];
---

<html
  lang={Astro.currentLocale === "en" ? "en" : "zh-Hant"}
  transition:name="root"
  transition:animate="none"
  class="overflow-y-auto scrollbar-stable"
>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <title>{`${frontmatter.title} - Wolf Yuan`}</title>
    <SEO
      description={frontmatter.description}
      charset="UTF-8"
      openGraph={{
        basic: {
          title: frontmatter.title,
          type: "article",
          image: frontmatter.ogImage,
        },
        optional: {
          locale: localeCode,
          localeAlternate: ["en_US", "zh_Hant"],
        },
        article: {
          publishedTime: pluginFrontmatter.createdTime,
          modifiedTime: pluginFrontmatter.lastModified,
          authors: frontmatter.authors,
          tags: frontmatter.tags,
        },
      }}
      twitter={{
        title: frontmatter.title,
        description: frontmatter.description,
        card: "summary_large_image",
        site: "@wolfyuan1135",
      }}
    />

    <ClientRouter />
  </head>
  <body class="flex h-full flex-col bg-gray-900 text-gray-50">
    <div class="flex min-h-screen flex-col">
      <Nav fullPage={true} transition:persist />

      <div transition:animate="fade">
        <div
          class="mx-auto max-w-7xl"
          transition:name={frontmatter.title}
        >
          <div class="sm:px7">
            <div
              class="relative z-[5] mx-auto mb-4 w-full overflow-hidden bg-cover bg-center bg-no-repeat pt-[50%] before:absolute before:inset-0 before:z-[-5] before:block before:bg-gradient-to-t before:from-black before:from-20% before:to-transparent before:opacity-80 before:content-[''] xl:rounded-xl xl:pt-[30%] before:xl:rounded-xl"
              transition:name={frontmatter.title + "i"}
            >
              <Image
                src={postImages[frontmatter.image]()}
                alt={`Cover for article ${frontmatter.title}`}
                class="pointer-events-none absolute left-0 top-0 z-[-10] h-full w-full object-cover"
                loading="eager"
              />
              <div class="px-8 py-6">
                <h1
                  class="py-4 text-2xl font-extrabold md:text-4xl"
                  transition:name={frontmatter.title + "t"}
                >
                  {frontmatter.title}
                </h1>
                <p
                  class="sm:text-md py-2 text-sm text-gray-300 md:text-xl"
                  transition:name={frontmatter.title + "d"}
                >
                  {frontmatter.description}
                </p>
                <p class="py-2 text-sm text-gray-400 md:text-lg">
                  {t["modified"]}{lastModified}
                </p>
                <p class="md:text-md text-sm text-gray-500">
                  {t["created"]}{created}
                </p>

                <div
                  class="flex flex-wrap place-items-center gap-3 pt-4 text-sm"
                  transition:name={frontmatter.title + "k"}
                >
                  {
                    frontmatter.tags.map((tag, index) => (
                      <div
                        class={twMerge(
                          "flex place-items-center gap-2 rounded-md border-2 px-3 py-1",
                          colorArray[index % 8].border,
                        )}
                      >
                        <div
                          class={twMerge(
                            "h-2 w-2 rounded-full",
                            colorArray[index % 8].circleColor,
                          )}
                        />
                        {tag.trim()}
                      </div>
                    ))
                  }
                </div>
              </div>
            </div>
          </div>

          <div class="mt-8 max-w-7xl px-7 xl:px-0">
            <slot />
          </div>
        </div>

        <Footer transition:persist />
        <Noscript />
      </div>
    </div>

    <style is:global>
      :root {
        color-scheme: dark;
      }

      @keyframes astroFadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }
      @keyframes astroFadeOut {
        from {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }

      pre.has-focused {
        --blur: 2px;
        --opacity: 0.6;
      }

      pre.has-focused:hover {
        --blur: 0;
        --opacity: 1;
      }

      .line:not(.focused) {
        transition:
          filter 0.3s,
          opacity 0.3s;
        filter: blur(var(--blur));
        opacity: var(--opacity);
      }

      .diff.add::before {
        content: "+ ";
        color: #a6adc8;
      }

      .diff.remove::before {
        content: "- ";
        color: #a6adc8;
      }

      .diff.add {
        background-color: rgb(166, 227, 161, 0.3);
      }

      .diff.remove {
        background-color: rgba(243, 139, 168, 0.3);
        opacity: 0.8;
        transition: opacity 0.3s;
        text-decoration: line-through;
      }

      .diff.remove:hover {
        opacity: 1;
        text-decoration: none;
      }
    </style>
  </body>
</html>
