---
import { Icon } from "astro-icon/components";
import { twMerge } from "tailwind-merge";

const {
  className,
  title,
  description,
  link,
  linkDescription,
  target,
  icons,
} = Astro.props;
---

<div class="duration-150 js:card-container">
  <a href={link} target={target ?? "_self"} class="w-fit">
    <div
      class={twMerge(
        "px-5 py-5 w-fit bg-gray-800 border-2 border-emerald-200 border-solid hover:bg-emerald-200 hover:text-gray-800 !duration-300",
        className,
      )}
    >
      <div class="min-h-72 md:min-h-64 grid">
        <div>
          <div class="grid grid-flow-col">
            <p
              class="text-xl place-self-start font-bold my-auto md:text-2xl"
            >
              {title}
            </p>
            <div class="place-self-end text-xl md:text-3xl">
              {
                icons.map((i) => (
                  <Icon
                    name={i.icon}
                    class={twMerge("inline mx-2", className)}
                  />
                ))
              }
            </div>
          </div>
          <p class="text-md md:text-xl py-4">{description}</p>
        </div>
        <div class="place-self-end w-full text-sm">
          Click here to go to{" "}
          <span class="font-bold">{linkDescription}</span>
          <Icon
            name="material-symbols:arrow-forward-rounded"
            class="mx-2 inline"
          />
        </div>
      </div>
    </div>
  </a>
</div>

<script>
  let cardContainerElements = document.getElementsByClassName(
    "js:card-container",
  );
  let cardContainers = Array.from(cardContainerElements);

  let handelCardEffect = (element) => {
    let rect = element.currentTarget.getBoundingClientRect();

    let x = element.clientX - rect.left;
    let y = element.clientY - rect.top;

    let dX = (x - rect.width / 2) / (rect.width / 2);
    let dY = (y - rect.height / 2) / (rect.height / 2);

    element.currentTarget.style.transform = `perspective(500px) rotateY(${
      dX * 4
    }deg) rotateX(${-dY * 4}deg)`;
  };

  cardContainers.forEach((currentCardContainer) => {
    currentCardContainer.addEventListener(
      "mousemove",
      handelCardEffect,
    );
    currentCardContainer.addEventListener(
      "mouseenter",
      handelCardEffect,
    );

    currentCardContainer.addEventListener("mouseleave", (element) => {
      element.currentTarget.style.transform = "";
    });
  });
</script>
